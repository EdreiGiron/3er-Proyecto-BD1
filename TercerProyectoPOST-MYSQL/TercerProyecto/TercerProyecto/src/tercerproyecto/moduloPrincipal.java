/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tercerproyecto;

import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author edwar
 */
public class moduloPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form moduloBD
     */
    public moduloPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSubtitulo = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        btnSQL = new javax.swing.JButton();
        btnPostgreS = new javax.swing.JButton();
        btnSincronizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblSubtitulo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblSubtitulo.setText("Seleccione la base de datos a usar");

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitulo.setText("BIENVENIDO");

        btnSQL.setText("MySQL");
        btnSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSQLActionPerformed(evt);
            }
        });

        btnPostgreS.setText("PostgreSQL");
        btnPostgreS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPostgreSActionPerformed(evt);
            }
        });

        btnSincronizar.setText("Sincronizar");
        btnSincronizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSincronizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(lblTitulo)
                .addGap(136, 136, 136))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblSubtitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSQL, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPostgreS)
                        .addGap(18, 18, 18)
                        .addComponent(btnSincronizar)
                        .addGap(58, 58, 58))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSubtitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSQL)
                    .addComponent(btnPostgreS)
                    .addComponent(btnSincronizar))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSQLActionPerformed
        IngresarEmpleado ingresaEmpleado = new IngresarEmpleado(true);  // Usar MySQL
        ingresaEmpleado.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnSQLActionPerformed

    private void btnPostgreSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPostgreSActionPerformed
        IngresarEmpleado ingresaEmpleado = new IngresarEmpleado(false);  // Usar PostgreSQL
        ingresaEmpleado.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_btnPostgreSActionPerformed

    private void btnSincronizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSincronizarActionPerformed
        JSONLogger jsonLogger = new JSONLogger();
        JSONArray bitacoraArray = jsonLogger.leerArchivoBitacora(); // Cargar la bitácora del archivo JSON

        if (bitacoraArray.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No hay registros en la bitácora para sincronizar.", "INFO MESSAGE", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        TransactionLogger.log("Iniciando sincronización de registros...");

        MySQLConnect mySQLConnect = new MySQLConnect();
        PostgreSQLConnect postgreSQLConnect = new PostgreSQLConnect();

        // Crear un mapa para mantener el registro más reciente de cada DPI
        Map<String, JSONObject> registroMasRecientePorDpi = new HashMap<>();

        // Recorrer la bitácora y encontrar el registro más reciente para cada DPI
        for (Object obj : bitacoraArray) {
            JSONObject registro = (JSONObject) obj;
            String dpi = (String) registro.get("dpi");
            long segundos = (long) registro.get("segundos");

            // Si es el primer registro del DPI o es más reciente que el actual, reemplazarlo
            if (!registroMasRecientePorDpi.containsKey(dpi) || segundos > (long) registroMasRecientePorDpi.get(dpi).get("segundos")) {
                registroMasRecientePorDpi.put(dpi, registro);
            }
        }

        // Procesar cada registro más reciente para cada DPI
        for (Map.Entry<String, JSONObject> entry : registroMasRecientePorDpi.entrySet()) {
            JSONObject registro = entry.getValue();
            String baseOrigen = (String) registro.get("base");
            String operacion = (String) registro.get("operacion");
            String dpi = (String) registro.get("dpi");

            TransactionLogger.log("Procesando registro más reciente...");
            TransactionLogger.log("Base Origen: " + baseOrigen + ", Operación: " + operacion + ", DPI: " + dpi);

            try {
                // Obtener el empleado de ambas bases de datos
                Empleado empleadoMySQL = mySQLConnect.buscarEmpleado(dpi);
                Empleado empleadoPostgreSQL = postgreSQLConnect.buscarEmpleado(dpi);

                // Si la operación es INSERT o UPDATE, sincronizar la información
                if ("INSERT".equals(operacion) || "UPDATE".equals(operacion)) {
                    if ("MySQL".equals(baseOrigen)) {
                        if (empleadoMySQL != null) {
                            // Si el registro más reciente está en MySQL, replicar en PostgreSQL
                            if (empleadoPostgreSQL == null) {
                                postgreSQLConnect.insertarEmpleado(empleadoMySQL);
                                TransactionLogger.log("El empleado con DPI " + dpi + " fue insertado en PostgreSQL.");
                            } else {
                                postgreSQLConnect.modificarEmpleado(empleadoMySQL);
                                TransactionLogger.log("El empleado con DPI " + dpi + " fue actualizado en PostgreSQL.");
                            }
                        }
                    } else if ("PostgreSQL".equals(baseOrigen)) {
                        if (empleadoPostgreSQL != null) {
                            // Si el registro más reciente está en PostgreSQL, replicar en MySQL
                            if (empleadoMySQL == null) {
                                mySQLConnect.insertarEmpleado(empleadoPostgreSQL);
                                TransactionLogger.log("El empleado con DPI " + dpi + " fue insertado en MySQL.");
                            } else {
                                mySQLConnect.modificarEmpleado(empleadoPostgreSQL);
                                TransactionLogger.log("El empleado con DPI " + dpi + " fue actualizado en MySQL.");
                            }
                        }
                    }
                }

                // Si la operación es DELETE, eliminar el registro en ambas bases de datos
                if ("DELETE".equals(operacion)) {
                    if (empleadoMySQL != null) {
                        mySQLConnect.eliminarEmpleado(dpi);
                        TransactionLogger.log("El empleado con DPI " + dpi + " fue eliminado de MySQL.");
                    }
                    if (empleadoPostgreSQL != null) {
                        postgreSQLConnect.eliminarEmpleado(dpi);
                        TransactionLogger.log("El empleado con DPI " + dpi + " fue eliminado de PostgreSQL.");
                    }
                }

            } catch (SQLException ex) {
                TransactionLogger.log("Error al procesar el DPI " + dpi + ": " + ex.getMessage());
            }
        }

        TransactionLogger.log("Sincronización finalizada.");
    }//GEN-LAST:event_btnSincronizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(moduloPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(moduloPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(moduloPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(moduloPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new moduloPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPostgreS;
    private javax.swing.JButton btnSQL;
    private javax.swing.JButton btnSincronizar;
    private javax.swing.JLabel lblSubtitulo;
    private javax.swing.JLabel lblTitulo;
    // End of variables declaration//GEN-END:variables
}
